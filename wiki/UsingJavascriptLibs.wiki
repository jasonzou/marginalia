#summary Why Marginalia does not use Javascript libraries like jQuery

I have been asked on a number of occasions why Marginalia does not use a standard Javascript library like jQuery, Prototype, or YUI.  Instead, it includes its own crude implementations of utility functions for managing the DOM and HTML.  These libraries include code that has been heavily tested and optimized, are simple to call (and would simplify Marginalia), and have an existing base of developers who skilled in their use.  Such a library could also provide UI enhancements.

It's a good question, and it's certainly something I am considering.  There are two reasons for my hesitation.

First, while Marginalia's functions are crude, their lack of flexibility may lead to better performance for basic DOM manipulation (finding a descendant node with a given class, for example).  Marginalia is heavily dependent on DOM manipulation.  The algorithm for calculating highlight locations can bog down for large documents or for large numbers of annotations, so it is very sensitive to performance in this area.

Second, Marginalia is itself a library that can plug into different host applications.  Each host application may already be using a Javascript library.  If Marginalia uses the same library, that's great.  If, on the other hand, it uses a different library, there could be problems.  Certain functions might be defined differently.  E.g. Prototype and jQuery both define the $ function.  So choosing a library could prevent Marginalia from being integrated into some host apps.  Furthermore, this would mean each host app would have to load up both its own library _and_ whatever Marginalia chose to use, slowing page load times.

It appears to me that the best solution would be for Marginalia to use a wrapper that abstracted out the functionality in needs.  The wrapper would then implement the function with whatever library the host application has chosen to use.  There's something akin to this already, where Marginalia tests for the presence of YUI before implementing autocompletion for margin notes (a feature used in the Moodle implementation).  This would still be a pain to implement though.  Multiple execution paths could complicate debugging.  And the wrappers would probably be somewhat limited and ugly, so that gains in code simplicity would be limited.

I welcome thoughts on this.  Personally, I would love to use jQuery to clarify the Marginalia source.  But at this point I'm not convinced it's worth the effort to do so in a portable manner.